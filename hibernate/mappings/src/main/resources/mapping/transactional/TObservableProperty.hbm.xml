<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <subclass name="org.n52.sos.ds.hibernate.entities.TObservableProperty" extends="org.n52.sos.ds.hibernate.entities.ObservableProperty" discriminator-value="true">
        <set name="childs" table="compositePhenomenon" inverse="false" fetch="select" lazy="false">
        	<comment>NOT YET USED! Relation table to store observableProperty hierarchies, aka compositePhenomenon. E.g. define a parent in a query and all childs are also contained in the response. Mapping file: mapping/transactional/TObservableProperty.hbm.xml</comment>
            <key>
                <column name="parentObservablePropertyId" not-null="true">
                	<comment>Foreign Key (FK) to the related parent observableProperty. Contains "observableProperty".observablePropertyid</comment>
                </column>
            </key>
            <many-to-many entity-name="org.n52.sos.ds.hibernate.entities.TObservableProperty" foreign-key="observablePropertyChildFk">
                <column name="childObservablePropertyId" not-null="true">
                	<comment>Foreign Key (FK) to the related child observableProperty. Contains "observableProperty".observablePropertyid</comment>
                </column>
            </many-to-many>
        </set>
        <set name="parents" table="compositePhenomenon" inverse="false" fetch="select" lazy="false" >
            <key>
                <column name="childObservablePropertyId" not-null="true" />
            </key>
            <many-to-many entity-name="org.n52.sos.ds.hibernate.entities.TObservableProperty" foreign-key="observablePropertyParentFk">
                <column name="parentObservablePropertyId" not-null="true" />
            </many-to-many>
        </set>
	</subclass>
</hibernate-mapping>
