<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="org.n52.sos.ds.hibernate.entities.ObservableProperty" table="observableProperty">
        <comment>Table to store the ObservedProperty/Phenomenon information. Mapping file: mapping/core/ObservableProperty.hbm.xml</comment>
        <id name="observablePropertyId" type="long">
            <column name="observablePropertyId">
                <comment>Table primary key, used for relations</comment>
            </column>
            <generator class="native">
                <param name="sequence">observablePropertyId_seq</param>
            </generator>
        </id>
        <property name="identifier" type="string">
            <column name="identifier" not-null="true" unique-key="obsPropIdentifierUK">
                <comment>The identifier of the observableProperty, gml:identifier. Used as parameter for queries. Unique</comment>
            </column>
        </property>
        <many-to-one name="codespace" class="org.n52.sos.ds.hibernate.entities.Codespace" foreign-key="obsPropCodespaceIdentifierFk">
            <column name="codespace">
                <comment>Relation/foreign key to the codespace table. Contains the gml:identifier codespace. Optional</comment>
            </column>
        </many-to-one>
        <property name="name" type="string">
            <column name="name">
                <comment>The name of the observableProperty, gml:name. Optional</comment>
            </column>
        </property>
        <many-to-one name="codespaceName" class="org.n52.sos.ds.hibernate.entities.Codespace" foreign-key="obsPropCodespaceNameFk">
            <column name="codespaceName">
                <comment>Relation/foreign key to the codespace table. Contains the gml:name codespace. Optional</comment>
            </column>
        </many-to-one>
        <property name="description" type="string">
            <column name="description">
                <comment>Description of the observableProperty, gml:description. Optional</comment>
            </column>
        </property>
        <property name="disabled" type="org.hibernate.type.TrueFalseType">
            <column name="disabled" not-null="true" default="'F'" check="disabled in ('T','F')">
                <comment>For later use by the SOS. Indicator if this observableProperty should not be provided by the SOS.</comment>
            </column>
        </property>
        <property name="hiddenChild" type="org.hibernate.type.TrueFalseType">
            <column name="hiddenChild" not-null="true" default="'F'" check="hiddenChild in ('T','F')"/>
        </property>
        <set name="childs" table="compositePhenomenon" inverse="false">
            <comment>Relation table to store observableProperty hierarchies, aka compositePhenomenon. E.g. define a parent in a query and all childs are also contained in the response. Mapping file: mapping/transactional/TObservableProperty.hbm.xml</comment>
            <key>
                <column name="parentObservablePropertyId" not-null="true">
                    <comment>Foreign Key (FK) to the related parent observableProperty. Contains "observableProperty".observablePropertyid</comment>
                </column>
            </key>
            <many-to-many entity-name="org.n52.sos.ds.hibernate.entities.ObservableProperty" foreign-key="observablePropertyChildFk">
                <column name="childObservablePropertyId" not-null="true">
                    <comment>Foreign Key (FK) to the related child observableProperty. Contains "observableProperty".observablePropertyid</comment>
                </column>
            </many-to-many>
        </set>
        <set name="parents" table="compositePhenomenon" inverse="false" >
            <key>
                <column name="childObservablePropertyId" not-null="true" />
            </key>
            <many-to-many entity-name="org.n52.sos.ds.hibernate.entities.ObservableProperty" foreign-key="observablePropertyParentFk">
                <column name="parentObservablePropertyId" not-null="true" />
            </many-to-many>
        </set>
    </class>
</hibernate-mapping>
